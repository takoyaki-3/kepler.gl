"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNotification = createNotification;
exports.exportImageError = exports.successNotification = exports.errorNotification = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _utils = require("./utils");

var _defaultSettings = require("../constants/default-settings");

var _userGuides = require("../constants/user-guides");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Creates a notofication
 * @param {object} opt
 * @param {string} opt.message - Message to display during the notification
 * @param {string} opt.type - The type of message. One of DEFAULT_NOTIFICATION_TYPES
 * @param {string} opt.topic - The topic the notification belongs to. One of DEFAULT_NOTIFICATION_TOPICS
 * @param {string} opt.id optional id for notification. If not provided it will be generated by the method
 * @param {object} opt.options - Extra parameters to store as part of hte notification
 * @returns {object}
 */
function createNotification(_ref) {
  var _ref$message = _ref.message,
      message = _ref$message === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_MESSAGE : _ref$message,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_TYPES.info : _ref$type,
      _ref$topic = _ref.topic,
      topic = _ref$topic === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_TOPICS.global : _ref$topic,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? (0, _utils.generateHashId)(_defaultSettings.DEFAULT_UUID_COUNT) : _ref$id,
      options = (0, _objectWithoutProperties2["default"])(_ref, ["message", "type", "topic", "id"]);
  return _objectSpread(_objectSpread({}, options), {}, {
    id: id,
    message: message,
    type: type,
    topic: topic
  });
}
/**
 * Creates an error notification
 * @param options
 * @returns {{topic, id, message, type: (null|number)}}
 */


var errorNotification = function errorNotification(options) {
  return _objectSpread(_objectSpread({}, createNotification(options)), {}, {
    type: _defaultSettings.DEFAULT_NOTIFICATION_TYPES.error
  });
};
/**
 * Creates a success notification
 * @param options
 * @returns {{topic, id, message, type: null}}
 */


exports.errorNotification = errorNotification;

var successNotification = function successNotification(options) {
  return _objectSpread(_objectSpread({}, createNotification(options)), {}, {
    type: _defaultSettings.DEFAULT_NOTIFICATION_TYPES.success
  });
};

exports.successNotification = successNotification;

var exportImageError = function exportImageError(options) {
  return errorNotification(_objectSpread(_objectSpread({}, options), {}, {
    topic: _defaultSettings.DEFAULT_NOTIFICATION_TOPICS.global,
    message: "Failed to export image, please take a screenshot of the javascript console, report the with [this link](".concat(_userGuides.BUG_REPORT_LINK, ") ")
  }));
};

exports.exportImageError = exportImageError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9ub3RpZmljYXRpb25zLXV0aWxzLmpzIl0sIm5hbWVzIjpbImNyZWF0ZU5vdGlmaWNhdGlvbiIsIm1lc3NhZ2UiLCJERUZBVUxUX05PVElGSUNBVElPTl9NRVNTQUdFIiwidHlwZSIsIkRFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTIiwiaW5mbyIsInRvcGljIiwiREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTIiwiZ2xvYmFsIiwiaWQiLCJERUZBVUxUX1VVSURfQ09VTlQiLCJvcHRpb25zIiwiZXJyb3JOb3RpZmljYXRpb24iLCJlcnJvciIsInN1Y2Nlc3NOb3RpZmljYXRpb24iLCJzdWNjZXNzIiwiZXhwb3J0SW1hZ2VFcnJvciIsIkJVR19SRVBPUlRfTElOSyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBRUE7O0FBT0E7Ozs7OztBQUVBOzs7Ozs7Ozs7O0FBVU8sU0FBU0Esa0JBQVQsT0FNSjtBQUFBLDBCQUxEQyxPQUtDO0FBQUEsTUFMREEsT0FLQyw2QkFMU0MsNkNBS1Q7QUFBQSx1QkFKREMsSUFJQztBQUFBLE1BSkRBLElBSUMsMEJBSk1DLDRDQUEyQkMsSUFJakM7QUFBQSx3QkFIREMsS0FHQztBQUFBLE1BSERBLEtBR0MsMkJBSE9DLDZDQUE0QkMsTUFHbkM7QUFBQSxxQkFGREMsRUFFQztBQUFBLE1BRkRBLEVBRUMsd0JBRkksMkJBQWVDLG1DQUFmLENBRUo7QUFBQSxNQURFQyxPQUNGO0FBQ0QseUNBQ0tBLE9BREw7QUFFRUYsSUFBQUEsRUFBRSxFQUFGQSxFQUZGO0FBR0VSLElBQUFBLE9BQU8sRUFBUEEsT0FIRjtBQUlFRSxJQUFBQSxJQUFJLEVBQUpBLElBSkY7QUFLRUcsSUFBQUEsS0FBSyxFQUFMQTtBQUxGO0FBT0Q7QUFFRDs7Ozs7OztBQUtPLElBQU1NLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBQUQsT0FBTztBQUFBLHlDQUNuQ1gsa0JBQWtCLENBQUNXLE9BQUQsQ0FEaUI7QUFFdENSLElBQUFBLElBQUksRUFBRUMsNENBQTJCUztBQUZLO0FBQUEsQ0FBakM7QUFLUDs7Ozs7Ozs7O0FBS08sSUFBTUMsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFzQixDQUFBSCxPQUFPO0FBQUEseUNBQ3JDWCxrQkFBa0IsQ0FBQ1csT0FBRCxDQURtQjtBQUV4Q1IsSUFBQUEsSUFBSSxFQUFFQyw0Q0FBMkJXO0FBRk87QUFBQSxDQUFuQzs7OztBQUtBLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBQUwsT0FBTztBQUFBLFNBQ3JDQyxpQkFBaUIsaUNBQ1pELE9BRFk7QUFFZkwsSUFBQUEsS0FBSyxFQUFFQyw2Q0FBNEJDLE1BRnBCO0FBR2ZQLElBQUFBLE9BQU8sb0hBQTZHZ0IsMkJBQTdHO0FBSFEsS0FEb0I7QUFBQSxDQUFoQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB7Z2VuZXJhdGVIYXNoSWR9IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuaW1wb3J0IHtcclxuICBERUZBVUxUX05PVElGSUNBVElPTl9NRVNTQUdFLFxyXG4gIERFRkFVTFRfTk9USUZJQ0FUSU9OX1RPUElDUyxcclxuICBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFUyxcclxuICBERUZBVUxUX1VVSURfQ09VTlRcclxufSBmcm9tICdjb25zdGFudHMvZGVmYXVsdC1zZXR0aW5ncyc7XHJcblxyXG5pbXBvcnQge0JVR19SRVBPUlRfTElOS30gZnJvbSAnY29uc3RhbnRzL3VzZXItZ3VpZGVzJztcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbm90b2ZpY2F0aW9uXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRcclxuICogQHBhcmFtIHtzdHJpbmd9IG9wdC5tZXNzYWdlIC0gTWVzc2FnZSB0byBkaXNwbGF5IGR1cmluZyB0aGUgbm90aWZpY2F0aW9uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHQudHlwZSAtIFRoZSB0eXBlIG9mIG1lc3NhZ2UuIE9uZSBvZiBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFU1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0LnRvcGljIC0gVGhlIHRvcGljIHRoZSBub3RpZmljYXRpb24gYmVsb25ncyB0by4gT25lIG9mIERFRkFVTFRfTk9USUZJQ0FUSU9OX1RPUElDU1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0LmlkIG9wdGlvbmFsIGlkIGZvciBub3RpZmljYXRpb24uIElmIG5vdCBwcm92aWRlZCBpdCB3aWxsIGJlIGdlbmVyYXRlZCBieSB0aGUgbWV0aG9kXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHQub3B0aW9ucyAtIEV4dHJhIHBhcmFtZXRlcnMgdG8gc3RvcmUgYXMgcGFydCBvZiBodGUgbm90aWZpY2F0aW9uXHJcbiAqIEByZXR1cm5zIHtvYmplY3R9XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uKHtcclxuICBtZXNzYWdlID0gREVGQVVMVF9OT1RJRklDQVRJT05fTUVTU0FHRSxcclxuICB0eXBlID0gREVGQVVMVF9OT1RJRklDQVRJT05fVFlQRVMuaW5mbyxcclxuICB0b3BpYyA9IERFRkFVTFRfTk9USUZJQ0FUSU9OX1RPUElDUy5nbG9iYWwsXHJcbiAgaWQgPSBnZW5lcmF0ZUhhc2hJZChERUZBVUxUX1VVSURfQ09VTlQpLFxyXG4gIC4uLm9wdGlvbnNcclxufSkge1xyXG4gIHJldHVybiB7XHJcbiAgICAuLi5vcHRpb25zLFxyXG4gICAgaWQsXHJcbiAgICBtZXNzYWdlLFxyXG4gICAgdHlwZSxcclxuICAgIHRvcGljXHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gZXJyb3Igbm90aWZpY2F0aW9uXHJcbiAqIEBwYXJhbSBvcHRpb25zXHJcbiAqIEByZXR1cm5zIHt7dG9waWMsIGlkLCBtZXNzYWdlLCB0eXBlOiAobnVsbHxudW1iZXIpfX1cclxuICovXHJcbmV4cG9ydCBjb25zdCBlcnJvck5vdGlmaWNhdGlvbiA9IG9wdGlvbnMgPT4gKHtcclxuICAuLi5jcmVhdGVOb3RpZmljYXRpb24ob3B0aW9ucyksXHJcbiAgdHlwZTogREVGQVVMVF9OT1RJRklDQVRJT05fVFlQRVMuZXJyb3JcclxufSk7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIHN1Y2Nlc3Mgbm90aWZpY2F0aW9uXHJcbiAqIEBwYXJhbSBvcHRpb25zXHJcbiAqIEByZXR1cm5zIHt7dG9waWMsIGlkLCBtZXNzYWdlLCB0eXBlOiBudWxsfX1cclxuICovXHJcbmV4cG9ydCBjb25zdCBzdWNjZXNzTm90aWZpY2F0aW9uID0gb3B0aW9ucyA9PiAoe1xyXG4gIC4uLmNyZWF0ZU5vdGlmaWNhdGlvbihvcHRpb25zKSxcclxuICB0eXBlOiBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFUy5zdWNjZXNzXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGV4cG9ydEltYWdlRXJyb3IgPSBvcHRpb25zID0+XHJcbiAgZXJyb3JOb3RpZmljYXRpb24oe1xyXG4gICAgLi4ub3B0aW9ucyxcclxuICAgIHRvcGljOiBERUZBVUxUX05PVElGSUNBVElPTl9UT1BJQ1MuZ2xvYmFsLFxyXG4gICAgbWVzc2FnZTogYEZhaWxlZCB0byBleHBvcnQgaW1hZ2UsIHBsZWFzZSB0YWtlIGEgc2NyZWVuc2hvdCBvZiB0aGUgamF2YXNjcmlwdCBjb25zb2xlLCByZXBvcnQgdGhlIHdpdGggW3RoaXMgbGlua10oJHtCVUdfUkVQT1JUX0xJTkt9KSBgXHJcbiAgfSk7XHJcbiJdfQ==