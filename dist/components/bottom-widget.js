"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = BottomWidgetFactory;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _timeWidget = _interopRequireDefault(require("./filters/time-widget"));

var _animationControl = _interopRequireDefault(require("./common/animation-control/animation-control"));

var _defaultSettings = require("../constants/default-settings");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  padding-top: ", "px;\n  padding-right: ", "px;\n  padding-bottom: ", "px;\n  padding-left: ", "px;\n  width: ", "px;\n  bottom: 0;\n  right: 0;\n  z-index: 1;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var propTypes = {
  filters: _propTypes["default"].arrayOf(_propTypes["default"].object),
  datasets: _propTypes["default"].object,
  uiState: _propTypes["default"].object,
  layers: _propTypes["default"].arrayOf(_propTypes["default"].object),
  animationConfig: _propTypes["default"].object,
  visStateActions: _propTypes["default"].object,
  sidePanelWidth: _propTypes["default"].number,
  containerW: _propTypes["default"].number
};
var maxWidth = 1080;
BottomWidgetFactory.deps = [_timeWidget["default"], _animationControl["default"]];

var BottomWidgetContainer = _styledComponents["default"].div(_templateObject(), function (props) {
  return props.theme.bottomWidgetPaddingTop;
}, function (props) {
  return props.theme.bottomWidgetPaddingRight;
}, function (props) {
  return props.theme.bottomWidgetPaddingBottom;
}, function (props) {
  return props.theme.bottomWidgetPaddingLeft;
}, function (props) {
  return props.width;
});

function BottomWidgetFactory(TimeWidget, AnimationControl) {
  var BottomWidget = function BottomWidget(props) {
    var datasets = props.datasets,
        filters = props.filters,
        animationConfig = props.animationConfig,
        visStateActions = props.visStateActions,
        containerW = props.containerW,
        uiState = props.uiState,
        sidePanelWidth = props.sidePanelWidth,
        layers = props.layers;
    var activeSidePanel = uiState.activeSidePanel,
        readOnly = uiState.readOnly;
    var isOpen = Boolean(activeSidePanel);
    var enlargedFilterIdx = filters.findIndex(function (f) {
      return f.enlarged && f.type === _defaultSettings.FILTER_TYPES.timeRange;
    });
    var isAnyFilterAnimating = filters.some(function (f) {
      return f.isAnimating;
    });
    var enlargedFilterWidth = isOpen ? containerW - sidePanelWidth : containerW; // show playback control if layers contain trip layer & at least one trip layer is visible

    var animatedLayer = layers.filter(function (l) {
      return l.config.animation && l.config.animation.enabled && l.config.isVisible;
    });
    var readToAnimation = Array.isArray(animationConfig.domain) && animationConfig.currentTime; // if animation control is showing, hide time display in time slider

    var showFloatingTimeDisplay = !animatedLayer.length;
    return /*#__PURE__*/_react["default"].createElement(BottomWidgetContainer, {
      width: Math.min(maxWidth, enlargedFilterWidth),
      className: "bottom-widget--container"
    }, animatedLayer.length && readToAnimation ? /*#__PURE__*/_react["default"].createElement(AnimationControl, {
      animationConfig: animationConfig,
      updateAnimationTime: visStateActions.updateAnimationTime,
      updateAnimationSpeed: visStateActions.updateLayerAnimationSpeed
    }) : null, enlargedFilterIdx > -1 && Object.keys(datasets).length > 0 ? /*#__PURE__*/_react["default"].createElement(TimeWidget, {
      filter: filters[enlargedFilterIdx],
      index: enlargedFilterIdx,
      isAnyFilterAnimating: isAnyFilterAnimating,
      datasets: datasets,
      readOnly: readOnly,
      showTimeDisplay: showFloatingTimeDisplay,
      setFilterPlot: visStateActions.setFilterPlot,
      setFilter: visStateActions.setFilter,
      toggleAnimation: visStateActions.toggleFilterAnimation,
      updateAnimationSpeed: visStateActions.updateFilterAnimationSpeed,
      enlargeFilter: visStateActions.enlargeFilter
    }) : null);
  };

  BottomWidget.propTypes = propTypes;
  return BottomWidget;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL2JvdHRvbS13aWRnZXQuanMiXSwibmFtZXMiOlsicHJvcFR5cGVzIiwiZmlsdGVycyIsIlByb3BUeXBlcyIsImFycmF5T2YiLCJvYmplY3QiLCJkYXRhc2V0cyIsInVpU3RhdGUiLCJsYXllcnMiLCJhbmltYXRpb25Db25maWciLCJ2aXNTdGF0ZUFjdGlvbnMiLCJzaWRlUGFuZWxXaWR0aCIsIm51bWJlciIsImNvbnRhaW5lclciLCJtYXhXaWR0aCIsIkJvdHRvbVdpZGdldEZhY3RvcnkiLCJkZXBzIiwiVGltZVdpZGdldEZhY3RvcnkiLCJBbmltYXRpb25Db250cm9sRmFjdG9yeSIsIkJvdHRvbVdpZGdldENvbnRhaW5lciIsInN0eWxlZCIsImRpdiIsInByb3BzIiwidGhlbWUiLCJib3R0b21XaWRnZXRQYWRkaW5nVG9wIiwiYm90dG9tV2lkZ2V0UGFkZGluZ1JpZ2h0IiwiYm90dG9tV2lkZ2V0UGFkZGluZ0JvdHRvbSIsImJvdHRvbVdpZGdldFBhZGRpbmdMZWZ0Iiwid2lkdGgiLCJUaW1lV2lkZ2V0IiwiQW5pbWF0aW9uQ29udHJvbCIsIkJvdHRvbVdpZGdldCIsImFjdGl2ZVNpZGVQYW5lbCIsInJlYWRPbmx5IiwiaXNPcGVuIiwiQm9vbGVhbiIsImVubGFyZ2VkRmlsdGVySWR4IiwiZmluZEluZGV4IiwiZiIsImVubGFyZ2VkIiwidHlwZSIsIkZJTFRFUl9UWVBFUyIsInRpbWVSYW5nZSIsImlzQW55RmlsdGVyQW5pbWF0aW5nIiwic29tZSIsImlzQW5pbWF0aW5nIiwiZW5sYXJnZWRGaWx0ZXJXaWR0aCIsImFuaW1hdGVkTGF5ZXIiLCJmaWx0ZXIiLCJsIiwiY29uZmlnIiwiYW5pbWF0aW9uIiwiZW5hYmxlZCIsImlzVmlzaWJsZSIsInJlYWRUb0FuaW1hdGlvbiIsIkFycmF5IiwiaXNBcnJheSIsImRvbWFpbiIsImN1cnJlbnRUaW1lIiwic2hvd0Zsb2F0aW5nVGltZURpc3BsYXkiLCJsZW5ndGgiLCJNYXRoIiwibWluIiwidXBkYXRlQW5pbWF0aW9uVGltZSIsInVwZGF0ZUxheWVyQW5pbWF0aW9uU3BlZWQiLCJPYmplY3QiLCJrZXlzIiwic2V0RmlsdGVyUGxvdCIsInNldEZpbHRlciIsInRvZ2dsZUZpbHRlckFuaW1hdGlvbiIsInVwZGF0ZUZpbHRlckFuaW1hdGlvblNwZWVkIiwiZW5sYXJnZUZpbHRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFNBQVMsR0FBRztBQUNoQkMsRUFBQUEsT0FBTyxFQUFFQyxzQkFBVUMsT0FBVixDQUFrQkQsc0JBQVVFLE1BQTVCLENBRE87QUFFaEJDLEVBQUFBLFFBQVEsRUFBRUgsc0JBQVVFLE1BRko7QUFHaEJFLEVBQUFBLE9BQU8sRUFBRUosc0JBQVVFLE1BSEg7QUFJaEJHLEVBQUFBLE1BQU0sRUFBRUwsc0JBQVVDLE9BQVYsQ0FBa0JELHNCQUFVRSxNQUE1QixDQUpRO0FBS2hCSSxFQUFBQSxlQUFlLEVBQUVOLHNCQUFVRSxNQUxYO0FBTWhCSyxFQUFBQSxlQUFlLEVBQUVQLHNCQUFVRSxNQU5YO0FBT2hCTSxFQUFBQSxjQUFjLEVBQUVSLHNCQUFVUyxNQVBWO0FBUWhCQyxFQUFBQSxVQUFVLEVBQUVWLHNCQUFVUztBQVJOLENBQWxCO0FBV0EsSUFBTUUsUUFBUSxHQUFHLElBQWpCO0FBRUFDLG1CQUFtQixDQUFDQyxJQUFwQixHQUEyQixDQUFDQyxzQkFBRCxFQUFvQkMsNEJBQXBCLENBQTNCOztBQUVBLElBQU1DLHFCQUFxQixHQUFHQyw2QkFBT0MsR0FBVixvQkFJVixVQUFBQyxLQUFLO0FBQUEsU0FBSUEsS0FBSyxDQUFDQyxLQUFOLENBQVlDLHNCQUFoQjtBQUFBLENBSkssRUFLUixVQUFBRixLQUFLO0FBQUEsU0FBSUEsS0FBSyxDQUFDQyxLQUFOLENBQVlFLHdCQUFoQjtBQUFBLENBTEcsRUFNUCxVQUFBSCxLQUFLO0FBQUEsU0FBSUEsS0FBSyxD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Q0FBekQsZ0JBQ0MsZ0NBQUMsVUFBRDtBQUNFLE1BQUEsTUFBTSxFQUFFMUQsT0FBTyxDQUFDa0MsaUJBQUQsQ0FEakI7QUFFRSxNQUFBLEtBQUssRUFBRUEsaUJBRlQ7QUFHRSxNQUFBLG9CQUFvQixFQUFFTyxvQkFIeEI7QUFJRSxNQUFBLFFBQVEsRUFBRXJDLFFBSlo7QUFLRSxNQUFBLFFBQVEsRUFBRTJCLFFBTFo7QUFNRSxNQUFBLGVBQWUsRUFBRTBCLHVCQU5uQjtBQU9FLE1BQUEsYUFBYSxFQUFFakQsZUFBZSxDQUFDeUQsYUFQakM7QUFRRSxNQUFBLFNBQVMsRUFBRXpELGVBQWUsQ0FBQzBELFNBUjdCO0FBU0UsTUFBQSxlQUFlLEVBQUUxRCxlQUFlLENBQUMyRCxxQkFUbkM7QUFVRSxNQUFBLG9CQUFvQixFQUFFM0QsZUFBZSxDQUFDNEQsMEJBVnhDO0FBV0UsTUFBQSxhQUFhLEVBQUU1RCxlQUFlLENBQUM2RDtBQVhqQyxNQURELEdBY0csSUF6Qk4sQ0FERjtBQTZCRCxHQTFERDs7QUE0REF4QyxFQUFBQSxZQUFZLENBQUM5QixTQUFiLEdBQXlCQSxTQUF6QjtBQUVBLFNBQU84QixZQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjAgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IFRpbWVXaWRnZXRGYWN0b3J5IGZyb20gJy4vZmlsdGVycy90aW1lLXdpZGdldCc7XHJcbmltcG9ydCBBbmltYXRpb25Db250cm9sRmFjdG9yeSBmcm9tICcuL2NvbW1vbi9hbmltYXRpb24tY29udHJvbC9hbmltYXRpb24tY29udHJvbCc7XHJcbmltcG9ydCB7RklMVEVSX1RZUEVTfSBmcm9tICdjb25zdGFudHMvZGVmYXVsdC1zZXR0aW5ncyc7XHJcblxyXG5jb25zdCBwcm9wVHlwZXMgPSB7XHJcbiAgZmlsdGVyczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9iamVjdCksXHJcbiAgZGF0YXNldHM6IFByb3BUeXBlcy5vYmplY3QsXHJcbiAgdWlTdGF0ZTogUHJvcFR5cGVzLm9iamVjdCxcclxuICBsYXllcnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLFxyXG4gIGFuaW1hdGlvbkNvbmZpZzogUHJvcFR5cGVzLm9iamVjdCxcclxuICB2aXNTdGF0ZUFjdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXHJcbiAgc2lkZVBhbmVsV2lkdGg6IFByb3BUeXBlcy5udW1iZXIsXHJcbiAgY29udGFpbmVyVzogUHJvcFR5cGVzLm51bWJlclxyXG59O1xyXG5cclxuY29uc3QgbWF4V2lkdGggPSAxMDgwO1xyXG5cclxuQm90dG9tV2lkZ2V0RmFjdG9yeS5kZXBzID0gW1RpbWVXaWRnZXRGYWN0b3J5LCBBbmltYXRpb25Db250cm9sRmFjdG9yeV07XHJcblxyXG5jb25zdCBCb3R0b21XaWRnZXRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgcGFkZGluZy10b3A6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuYm90dG9tV2lkZ2V0UGFkZGluZ1RvcH1weDtcclxuICBwYWRkaW5nLXJpZ2h0OiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmJvdHRvbVdpZGdldFBhZGRpbmdSaWdodH1weDtcclxuICBwYWRkaW5nLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5ib3R0b21XaWRnZXRQYWRkaW5nQm90dG9tfXB4O1xyXG4gIHBhZGRpbmctbGVmdDogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5ib3R0b21XaWRnZXRQYWRkaW5nTGVmdH1weDtcclxuICB3aWR0aDogJHtwcm9wcyA9PiBwcm9wcy53aWR0aH1weDtcclxuICBib3R0b206IDA7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgei1pbmRleDogMTtcclxuYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJvdHRvbVdpZGdldEZhY3RvcnkoVGltZVdpZGdldCwgQW5pbWF0aW9uQ29udHJvbCkge1xyXG4gIGNvbnN0IEJvdHRvbVdpZGdldCA9IHByb3BzID0+IHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgZGF0YXNldHMsXHJcbiAgICAgIGZpbHRlcnMsXHJcbiAgICAgIGFuaW1hdGlvbkNvbmZpZyxcclxuICAgICAgdmlzU3RhdGVBY3Rpb25zLFxyXG4gICAgICBjb250YWluZXJXLFxyXG4gICAgICB1aVN0YXRlLFxyXG4gICAgICBzaWRlUGFuZWxXaWR0aCxcclxuICAgICAgbGF5ZXJzXHJcbiAgICB9ID0gcHJvcHM7XHJcblxyXG4gICAgY29uc3Qge2FjdGl2ZVNpZGVQYW5lbCwgcmVhZE9ubHl9ID0gdWlTdGF0ZTtcclxuICAgIGNvbnN0IGlzT3BlbiA9IEJvb2xlYW4oYWN0aXZlU2lkZVBhbmVsKTtcclxuXHJcbiAgICBjb25zdCBlbmxhcmdlZEZpbHRlcklkeCA9IGZpbHRlcnMuZmluZEluZGV4KFxyXG4gICAgICBmID0+IGYuZW5sYXJnZWQgJiYgZi50eXBlID09PSBGSUxURVJfVFlQRVMudGltZVJhbmdlXHJcbiAgICApO1xyXG4gICAgY29uc3QgaXNBbnlGaWx0ZXJBbmltYXRpbmcgPSBmaWx0ZXJzLnNvbWUoZiA9PiBmLmlzQW5pbWF0aW5nKTtcclxuICAgIGNvbnN0IGVubGFyZ2VkRmlsdGVyV2lkdGggPSBpc09wZW4gPyBjb250YWluZXJXIC0gc2lkZVBhbmVsV2lkdGggOiBjb250YWluZXJXO1xyXG5cclxuICAgIC8vIHNob3cgcGxheWJhY2sgY29udHJvbCBpZiBsYXllcnMgY29udGFpbiB0cmlwIGxheWVyICYgYXQgbGVhc3Qgb25lIHRyaXAgbGF5ZXIgaXMgdmlzaWJsZVxyXG4gICAgY29uc3QgYW5pbWF0ZWRMYXllciA9IGxheWVycy5maWx0ZXIoXHJcbiAgICAgIGwgPT4gbC5jb25maWcuYW5pbWF0aW9uICYmIGwuY29uZmlnLmFuaW1hdGlvbi5lbmFibGVkICYmIGwuY29uZmlnLmlzVmlzaWJsZVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCByZWFkVG9BbmltYXRpb24gPSBBcnJheS5pc0FycmF5KGFuaW1hdGlvbkNvbmZpZy5kb21haW4pICYmIGFuaW1hdGlvbkNvbmZpZy5jdXJyZW50VGltZTtcclxuICAgIC8vIGlmIGFuaW1hdGlvbiBjb250cm9sIGlzIHNob3dpbmcsIGhpZGUgdGltZSBkaXNwbGF5IGluIHRpbWUgc2xpZGVyXHJcbiAgICBjb25zdCBzaG93RmxvYXRpbmdUaW1lRGlzcGxheSA9ICFhbmltYXRlZExheWVyLmxlbmd0aDtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxCb3R0b21XaWRnZXRDb250YWluZXJcclxuICAgICAgICB3aWR0aD17TWF0aC5taW4obWF4V2lkdGgsIGVubGFyZ2VkRmlsdGVyV2lkdGgpfVxyXG4gICAgICAgIGNsYXNzTmFtZT1cImJvdHRvbS13aWRnZXQtLWNvbnRhaW5lclwiXHJcbiAgICAgID5cclxuICAgICAgICB7YW5pbWF0ZWRMYXllci5sZW5ndGggJiYgcmVhZFRvQW5pbWF0aW9uID8gKFxyXG4gICAgICAgICAgPEFuaW1hdGlvbkNvbnRyb2xcclxuICAgICAgICAgICAgYW5pbWF0aW9uQ29uZmlnPXthbmltYXRpb25Db25maWd9XHJcbiAgICAgICAgICAgIHVwZGF0ZUFuaW1hdGlvblRpbWU9e3Zpc1N0YXRlQWN0aW9ucy51cGRhdGVBbmltYXRpb25UaW1lfVxyXG4gICAgICAgICAgICB1cGRhdGVBbmltYXRpb25TcGVlZD17dmlzU3RhdGVBY3Rpb25zLnVwZGF0ZUxheWVyQW5pbWF0aW9uU3BlZWR9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICkgOiBudWxsfVxyXG4gICAgICAgIHtlbmxhcmdlZEZpbHRlcklkeCA+IC0xICYmIE9iamVjdC5rZXlzKGRhdGFzZXRzKS5sZW5ndGggPiAwID8gKFxyXG4gICAgICAgICAgPFRpbWVXaWRnZXRcclxuICAgICAgICAgICAgZmlsdGVyPXtmaWx0ZXJzW2VubGFyZ2VkRmlsdGVySWR4XX1cclxuICAgICAgICAgICAgaW5kZXg9e2VubGFyZ2VkRmlsdGVySWR4fVxyXG4gICAgICAgICAgICBpc0FueUZpbHRlckFuaW1hdGluZz17aXNBbnlGaWx0ZXJBbmltYXRpbmd9XHJcbiAgICAgICAgICAgIGRhdGFzZXRzPXtkYXRhc2V0c31cclxuICAgICAgICAgICAgcmVhZE9ubHk9e3JlYWRPbmx5fVxyXG4gICAgICAgICAgICBzaG93VGltZURpc3BsYXk9e3Nob3dGbG9hdGluZ1RpbWVEaXNwbGF5fVxyXG4gICAgICAgICAgICBzZXRGaWx0ZXJQbG90PXt2aXNTdGF0ZUFjdGlvbnMuc2V0RmlsdGVyUGxvdH1cclxuICAgICAgICAgICAgc2V0RmlsdGVyPXt2aXNTdGF0ZUFjdGlvbnMuc2V0RmlsdGVyfVxyXG4gICAgICAgICAgICB0b2dnbGVBbmltYXRpb249e3Zpc1N0YXRlQWN0aW9ucy50b2dnbGVGaWx0ZXJBbmltYXRpb259XHJcbiAgICAgICAgICAgIHVwZGF0ZUFuaW1hdGlvblNwZWVkPXt2aXNTdGF0ZUFjdGlvbnMudXBkYXRlRmlsdGVyQW5pbWF0aW9uU3BlZWR9XHJcbiAgICAgICAgICAgIGVubGFyZ2VGaWx0ZXI9e3Zpc1N0YXRlQWN0aW9ucy5lbmxhcmdlRmlsdGVyfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICApIDogbnVsbH1cclxuICAgICAgPC9Cb3R0b21XaWRnZXRDb250YWluZXI+XHJcbiAgICApO1xyXG4gIH07XHJcblxyXG4gIEJvdHRvbVdpZGdldC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XHJcblxyXG4gIHJldHVybiBCb3R0b21XaWRnZXQ7XHJcbn1cclxuIl19