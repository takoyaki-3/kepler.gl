"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coordHasLength4 = coordHasLength4;
exports.containValidTime = containValidTime;
exports.isTripGeoJsonField = isTripGeoJsonField;
exports.parseTripGeoJsonTimestamp = parseTripGeoJsonTimestamp;
exports.getAnimationDomainFromTimestamps = getAnimationDomainFromTimestamps;

var _typeAnalyzer = require("type-analyzer");

var _dataUtils = require("../../utils/data-utils");

var _geojsonUtils = require("../geojson-layer/geojson-utils");

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/**
 * Parse geojson from string
 * @param {array} geojson feature object values
 * @returns {boolean} whether the geometry coordinates has length of 4
 */
function coordHasLength4(samples) {
  var hasLength4 = true;

  for (var i = 0; i < samples.length; i += 1) {
    hasLength4 = !samples[i].geometry.coordinates.find(function (c) {
      return c.length < 4;
    });

    if (!hasLength4) {
      break;
    }
  }

  return hasLength4;
}
/**
 * Check whether geojson linestring's 4th coordinate is 1) not timestamp 2) unix time stamp 3) real date time
 * @param {array} data array to be tested if its elements are timestamp
 * @returns {string} the type of timestamp: unix/datetime/invalid(not timestamp)
 */


function containValidTime(timestamps) {
  var formattedTimeStamps = timestamps.map(function (ts) {
    return {
      ts: ts
    };
  });
  var ignoredDataTypes = Object.keys(_typeAnalyzer.DATA_TYPES).filter(function (type) {
    return ![_typeAnalyzer.DATA_TYPES.TIME, _typeAnalyzer.DATA_TYPES.DATETIME].includes(type);
  }); // ignore all types but TIME to improve performance

  var analyzedType = _typeAnalyzer.Analyzer.computeColMeta(formattedTimeStamps, [], {
    ignoredDataTypes: ignoredDataTypes
  })[0];

  if (!analyzedType || analyzedType.category !== 'TIME') {
    return false;
  }

  return analyzedType;
}
/**
 * Check if geojson features are trip layer animatable by meeting 3 conditions
 * @param {array} features array of geojson feature objects
 * @returns {boolean} whether it is trip layer animatable
 */


function isTripGeoJsonField() {
  var allData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var field = arguments.length > 1 ? arguments[1] : undefined;

  if (!allData.length) {
    return false;
  }

  var getValue = function getValue(d) {
    return d[field.tableFieldIndex - 1];
  };

  var maxCount = 10000;
  var sampleRawFeatures = allData.length > maxCount ? (0, _dataUtils.getSampleData)(allData, maxCount, getValue) : allData.map(getValue);
  var features = sampleRawFeatures.map(_geojsonUtils.parseGeoJsonRawFeature).filter(function (f) {
    return f;
  });
  var featureTypes = (0, _geojsonUtils.getGeojsonFeatureTypes)(features); // condition 1: contain line string

  if (!featureTypes.line) {
    return false;
  } // condition 2:sample line strings contain 4 coordinates


  if (!coordHasLength4(features)) {
    return false;
  } // condition 3:the 4th coordinate of the first feature line strings is valid time


  var tsHolder = features[0].geometry.coordinates.map(function (coord) {
    return coord[3];
  });
  return Boolean(containValidTime(tsHolder));
}
/**
 * Get unix timestamp from animatable geojson for deck.gl trip layer
 * @param {Array<Object>} dataToFeature array of geojson feature objects, can be null
 * @returns {Array<Number>} unix timestamp in milliseconds
 */


function parseTripGeoJsonTimestamp(dataToFeature) {
  // Analyze type based on coordinates of the 1st lineString
  // select a sample trip to analyze time format
  var empty = {
    dataToTimeStamp: [],
    animationDomain: null
  };
  var sampleTrip = dataToFeature.find(function (f) {
    return f && f.geometry && f.geometry.coordinates && f.geometry.coordinates.length >= 3;
  }); // if no valid geometry

  if (!sampleTrip) {
    return empty;
  }

  var analyzedType = containValidTime(sampleTrip.geometry.coordinates.map(function (coord) {
    return coord[3];
  }));

  if (!analyzedType) {
    return empty;
  }

  var format = analyzedType.format;

  var getTimeValue = function getTimeValue(coord) {
    return coord && (0, _dataUtils.notNullorUndefined)(coord[3]) ? (0, _dataUtils.timeToUnixMilli)(coord[3], format) : null;
  };

  var dataToTimeStamp = dataToFeature.map(function (f) {
    return f && f.geometry && Array.isArray(f.geometry.coordinates) ? f.geometry.coordinates.map(getTimeValue) : null;
  });
  var animationDomain = getAnimationDomainFromTimestamps(dataToTimeStamp);
  return {
    dataToTimeStamp: dataToTimeStamp,
    animationDomain: animationDomain
  };
}

function findMinFromSorted() {
  var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return list.find(function (d) {
    return (0, _dataUtils.notNullorUndefined)(d) && Number.isFinite(d);
  }) || null;
}

function findMaxFromSorted() {
  var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var i = list.length - 1;

  while (i > 0) {
    if ((0, _dataUtils.notNullorUndefined)(list[i]) && Number.isFinite(list[i])) {
      return list[i];
    }

    i--;
  }

  return null;
}

function getAnimationDomainFromTimestamps() {
  var dataToTimeStamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return dataToTimeStamp.reduce(function (accu, tss) {
    var tsMin = findMinFromSorted(tss);
    var tsMax = findMaxFromSorted(tss);

    if (Number.isFinite(tsMin) && Number.isFinite(tsMax)) {
      accu[0] = Math.min(accu[0], tsMin);
      accu[1] = Math.max(accu[1], tsMax);
    }

    return accu;
  }, [Infinity, -Infinity]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,