"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStyle = getStyle;
exports.getEditHandleShape = getEditHandleShape;
exports.DEFAULT_RADIUS = exports.DEFAULT_STATE_STYLE_OPACITY = exports.RENDER_TYPE_STYLES = exports.STATE_STYLES_FILL = exports.DEFAULT_STATE_STYLE_FILL = exports.STATE_STYLES_STROKE = exports.DEFAULT_STATE_STYLE_STROKE = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactMapGlDraw = require("react-map-gl-draw");

var _constants = require("./constants");

var _lodash = _interopRequireDefault(require("lodash.get"));

var _STATE_STYLES_STROKE, _STATE_STYLES_FILL, _RENDER_TYPE_STYLES;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DEFAULT_EDIT_HANDLE_SHAPE = 'circle';
var rectStyle = {
  x: -6,
  y: -6,
  height: 12,
  width: 12
};
var DEFAULT_STATE_STYLE_STROKE = _constants.COLORS.PRIMARY;
exports.DEFAULT_STATE_STYLE_STROKE = DEFAULT_STATE_STYLE_STROKE;
var STATE_STYLES_STROKE = (_STATE_STYLES_STROKE = {}, (0, _defineProperty2["default"])(_STATE_STYLES_STROKE, _reactMapGlDraw.RenderStates.SELECTED, _constants.COLORS.PRIMARY), (0, _defineProperty2["default"])(_STATE_STYLES_STROKE, _reactMapGlDraw.RenderStates.HOVERED, _constants.COLORS.SECONDARY), _STATE_STYLES_STROKE);
exports.STATE_STYLES_STROKE = STATE_STYLES_STROKE;
var DEFAULT_STATE_STYLE_FILL = '#ffffff';
exports.DEFAULT_STATE_STYLE_FILL = DEFAULT_STATE_STYLE_FILL;
var STATE_STYLES_FILL = (_STATE_STYLES_FILL = {}, (0, _defineProperty2["default"])(_STATE_STYLES_FILL, _reactMapGlDraw.RenderStates.SELECTED, _constants.COLORS.SECONDARY), (0, _defineProperty2["default"])(_STATE_STYLES_FILL, _reactMapGlDraw.RenderStates.HOVERED, _constants.COLORS.SECONDARY), (0, _defineProperty2["default"])(_STATE_STYLES_FILL, _reactMapGlDraw.RenderStates.INACTIVE, _constants.COLORS.PRIMARY), (0, _defineProperty2["default"])(_STATE_STYLES_FILL, _reactMapGlDraw.RenderStates.UNCOMMITTED, _constants.COLORS.PRIMARY), _STATE_STYLES_FILL);
exports.STATE_STYLES_FILL = STATE_STYLES_FILL;
var STATE_STYLES_STROKE_WIDTH = 1;
var RENDER_TYPE_STYLES = (_RENDER_TYPE_STYLES = {}, (0, _defineProperty2["default"])(_RENDER_TYPE_STYLES, _reactMapGlDraw.RenderTypes.POINT, function (state) {
  return {
    fill: STATE_STYLES_FILL[state],
    stroke: state === _reactMapGlDraw.RenderStates.SELECTED ? _constants.COLORS.PRIMARY : DEFAULT_STATE_STYLE_STROKE
  };
}), (0, _defineProperty2["default"])(_RENDER_TYPE_STYLES, _reactMapGlDraw.RenderTypes.LINE_STRING, function () {
  return rectStyle;
}), (0, _defineProperty2["default"])(_RENDER_TYPE_STYLES, _reactMapGlDraw.RenderTypes.RECTANGLE, function () {
  return rectStyle;
}), (0, _defineProperty2["default"])(_RENDER_TYPE_STYLES, _reactMapGlDraw.RenderTypes.POLYGON, function () {
  return rectStyle;
}), _RENDER_TYPE_STYLES);
exports.RENDER_TYPE_STYLES = RENDER_TYPE_STYLES;
var DEFAULT_STATE_STYLE_OPACITY = 0;
exports.DEFAULT_STATE_STYLE_OPACITY = DEFAULT_STATE_STYLE_OPACITY;
var DEFAULT_RADIUS = 5;
exports.DEFAULT_RADIUS = DEFAULT_RADIUS;

function noOp() {}

function getStyle(_ref) {
  var feature = _ref.feature,
      state = _ref.state;
  var isVisible = (0, _lodash["default"])(feature, ['properties', 'isVisible'], true);
  var style = {
    stroke: STATE_STYLES_STROKE[state] || DEFAULT_STATE_STYLE_STROKE,
    strokeWidth: isVisible ? STATE_STYLES_STROKE_WIDTH : 0,
    fill: DEFAULT_STATE_STYLE_FILL,
    fillOpacity: DEFAULT_STATE_STYLE_OPACITY,
    r: DEFAULT_RADIUS
  };
  var renderType = feature.properties ? feature.properties.renderType : feature.renderType;
  return _objectSpread(_objectSpread({}, style), (RENDER_TYPE_STYLES[renderType] || noOp)(state));
}

function getEditHandleShape() {
  return DEFAULT_EDIT_HANDLE_SHAPE;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2VkaXRvci9oYW5kbGUtc3R5bGUuanMiXSwibmFtZXMiOlsiREVGQVVMVF9FRElUX0hBTkRMRV9TSEFQRSIsInJlY3RTdHlsZSIsIngiLCJ5IiwiaGVpZ2h0Iiwid2lkdGgiLCJERUZBVUxUX1NUQVRFX1NUWUxFX1NUUk9LRSIsIkNPTE9SUyIsIlBSSU1BUlkiLCJTVEFURV9TVFlMRVNfU1RST0tFIiwiUmVuZGVyU3RhdGVzIiwiU0VMRUNURUQiLCJIT1ZFUkVEIiwiU0VDT05EQVJZIiwiREVGQVVMVF9TVEFURV9TVFlMRV9GSUxMIiwiU1RBVEVfU1RZTEVTX0ZJTEwiLCJJTkFDVElWRSIsIlVOQ09NTUlUVEVEIiwiU1RBVEVfU1RZTEVTX1NUUk9LRV9XSURUSCIsIlJFTkRFUl9UWVBFX1NUWUxFUyIsIlJlbmRlclR5cGVzIiwiUE9JTlQiLCJzdGF0ZSIsImZpbGwiLCJzdHJva2UiLCJMSU5FX1NUUklORyIsIlJFQ1RBTkdMRSIsIlBPTFlHT04iLCJERUZBVUxUX1NUQVRFX1NUWUxFX09QQUNJVFkiLCJERUZBVUxUX1JBRElVUyIsIm5vT3AiLCJnZXRTdHlsZSIsImZlYXR1cmUiLCJpc1Zpc2libGUiLCJzdHlsZSIsInN0cm9rZVdpZHRoIiwiZmlsbE9wYWNpdHkiLCJyIiwicmVuZGVyVHlwZSIsInByb3BlcnRpZXMiLCJnZXRFZGl0SGFuZGxlU2hhcGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBRUEsSUFBTUEseUJBQXlCLEdBQUcsUUFBbEM7QUFFQSxJQUFNQyxTQUFTLEdBQUc7QUFDaEJDLEVBQUFBLENBQUMsRUFBRSxDQUFDLENBRFk7QUFFaEJDLEVBQUFBLENBQUMsRUFBRSxDQUFDLENBRlk7QUFHaEJDLEVBQUFBLE1BQU0sRUFBRSxFQUhRO0FBSWhCQyxFQUFBQSxLQUFLLEVBQUU7QUFKUyxDQUFsQjtBQU9PLElBQU1DLDBCQUEwQixHQUFHQyxrQkFBT0MsT0FBMUM7O0FBRUEsSUFBTUMsbUJBQW1CLHNGQUM3QkMsNkJBQWFDLFFBRGdCLEVBQ0xKLGtCQUFPQyxPQURGLDBEQUU3QkUsNkJBQWFFLE9BRmdCLEVBRU5MLGtCQUFPTSxTQUZELHdCQUF6Qjs7QUFLQSxJQUFNQyx3QkFBd0IsR0FBRyxTQUFqQzs7QUFFQSxJQUFNQyxpQkFBaUIsa0ZBQzNCTCw2QkFBYUMsUUFEYyxFQUNISixrQkFBT00sU0FESix3REFFM0JILDZCQUFhRSxPQUZjLEVBRUpMLGtCQUFPTSxTQUZILHdEQUczQkgsNkJBQWFNLFFBSGMsRUFHSFQsa0JBQU9DLE9BSEosd0RBSTNCRSw2QkFBYU8sV0FKYyxFQUlBVixrQkFBT0MsT0FKUCxzQkFBdkI7O0FBT1AsSUFBTVUseUJBQXlCLEdBQUcsQ0FBbEM7QUFFTyxJQUFNQyxrQkFBa0Isb0ZBQzVCQyw0QkFBWUMsS0FEZ0IsRUFDUixVQUFBQyxLQUFLO0FBQUEsU0FBSztBQUM3QkMsSUFBQUEsSUFBSSxFQUFFUixpQkFBaUIsQ0FBQ08sS0FBRCxDQURNO0FBRTdCRSxJQUFBQSxNQUFNLEVBQUVGLEtBQUssS0FBS1osNkJBQWFDLFFBQXZCLEdBQWtDSixrQkFBT0MsT0FBekMsR0FBbURGO0FBRjlCLEdBQUw7QUFBQSxDQURHLHlEQUs1QmMsNEJBQVlLLFdBTGdCLEVBS0Y7QUFBQSxTQUFNeEIsU0FBTjtBQUFBLENBTEUseURBTTVCbUIsNEJBQVlNLFNBTmdCLEVBTUo7QUFBQSxTQUFNekIsU0FBTjtBQUFBLENBTkkseURBTzVCbUIsNEJBQVlPLE9BUGdCLEVBT047QUFBQSxTQUFNMUIsU0FBTjtBQUFBLENBUE0sdUJBQXhCOztBQVVBLElBQU0yQiwyQkFBMkIsR0FBRyxDQUFwQzs7QUFFQSxJQUFNQyxjQUFjLEdBQUcsQ0FBdkI7OztBQUVQLFNBQVNDLElBQVQsR0FBZ0IsQ0FBRTs7QUFFWCxTQUFTQyxRQUFULE9BQW9DO0FBQUEsTUFBakJDLE9BQWlCLFFBQWpCQSxPQUFpQjtBQUFBLE1BQVJWLEtBQVEsUUFBUkEsS0FBUTtBQUN6QyxNQUFNVyxTQUFTLEdBQUcsd0JBQUlELE9BQUosRUFBYSxDQUFDLFlBQUQsRUFBZSxXQUFmLENBQWIsRUFBMEMsSUFBMUMsQ0FBbEI7QUFFQSxNQUFNRSxLQUFLLEdBQUc7QUFDWlYsSUFBQUEsTUFBTSxFQUFFZixtQkFBbUIsQ0FBQ2EsS0FBRCxDQUFuQixJQUE4QmhCLDBCQUQxQjtBQUVaNkIsSUFBQUEsV0FBVyxFQUFFRixTQUFTLEdBQUdmLHlCQUFILEdBQStCLENBRnpDO0FBR1pLLElBQUFBLElBQUksRUFBRVQsd0JBSE07QUFJWnNCLElBQUFBLFdBQVcsRUFBRVIsMkJBSkQ7QUFLWlMsSUFBQUEsQ0FBQyxFQUFFUjtBQUxTLEdBQWQ7QUFRQSxNQUFNUyxVQUFVLEdBQUdOLE9BQU8sQ0FBQ08sVUFBUixHQUFxQlAsT0FBTyxDQUFDTyxVQUFSLENBQW1CRCxVQUF4QyxHQUFxRE4sT0FBTyxDQUFDTSxVQUFoRjtBQUVBLHlDQUNLSixLQURMLEdBRUssQ0FBQ2Ysa0JBQWtCLENBQUNtQixVQUFELENBQWxCLElBQWtDUixJQUFuQyxFQUF5Q1IsS0FBekMsQ0FGTDtBQUlEOztBQUVNLFNBQVNrQixrQkFBVCxHQUE4QjtBQUNuQyxTQUFPeEMseUJBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB7UmVuZGVyU3RhdGVzLCBSZW5kZXJUeXBlc30gZnJvbSAncmVhY3QtbWFwLWdsLWRyYXcnO1xyXG5pbXBvcnQge0NPTE9SU30gZnJvbSAnLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgZ2V0IGZyb20gJ2xvZGFzaC5nZXQnO1xyXG5cclxuY29uc3QgREVGQVVMVF9FRElUX0hBTkRMRV9TSEFQRSA9ICdjaXJjbGUnO1xyXG5cclxuY29uc3QgcmVjdFN0eWxlID0ge1xyXG4gIHg6IC02LFxyXG4gIHk6IC02LFxyXG4gIGhlaWdodDogMTIsXHJcbiAgd2lkdGg6IDEyXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9TVEFURV9TVFlMRV9TVFJPS0UgPSBDT0xPUlMuUFJJTUFSWTtcclxuXHJcbmV4cG9ydCBjb25zdCBTVEFURV9TVFlMRVNfU1RST0tFID0ge1xyXG4gIFtSZW5kZXJTdGF0ZXMuU0VMRUNURURdOiBDT0xPUlMuUFJJTUFSWSxcclxuICBbUmVuZGVyU3RhdGVzLkhPVkVSRURdOiBDT0xPUlMuU0VDT05EQVJZXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9TVEFURV9TVFlMRV9GSUxMID0gJyNmZmZmZmYnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNUQVRFX1NUWUxFU19GSUxMID0ge1xyXG4gIFtSZW5kZXJTdGF0ZXMuU0VMRUNURURdOiBDT0xPUlMuU0VDT05EQVJZLFxyXG4gIFtSZW5kZXJTdGF0ZXMuSE9WRVJFRF06IENPTE9SUy5TRUNPTkRBUlksXHJcbiAgW1JlbmRlclN0YXRlcy5JTkFDVElWRV06IENPTE9SUy5QUklNQVJZLFxyXG4gIFtSZW5kZXJTdGF0ZXMuVU5DT01NSVRURURdOiBDT0xPUlMuUFJJTUFSWVxyXG59O1xyXG5cclxuY29uc3QgU1RBVEVfU1RZTEVTX1NUUk9LRV9XSURUSCA9IDE7XHJcblxyXG5leHBvcnQgY29uc3QgUkVOREVSX1RZUEVfU1RZTEVTID0ge1xyXG4gIFtSZW5kZXJUeXBlcy5QT0lOVF06IHN0YXRlID0+ICh7XHJcbiAgICBmaWxsOiBTVEFURV9TVFlMRVNfRklMTFtzdGF0ZV0sXHJcbiAgICBzdHJva2U6IHN0YXRlID09PSBSZW5kZXJTdGF0ZXMuU0VMRUNURUQgPyBDT0xPUlMuUFJJTUFSWSA6IERFRkFVTFRfU1RBVEVfU1RZTEVfU1RST0tFXHJcbiAgfSksXHJcbiAgW1JlbmRlclR5cGVzLkxJTkVfU1RSSU5HXTogKCkgPT4gcmVjdFN0eWxlLFxyXG4gIFtSZW5kZXJUeXBlcy5SRUNUQU5HTEVdOiAoKSA9PiByZWN0U3R5bGUsXHJcbiAgW1JlbmRlclR5cGVzLlBPTFlHT05dOiAoKSA9PiByZWN0U3R5bGVcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NUQVRFX1NUWUxFX09QQUNJVFkgPSAwO1xyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfUkFESVVTID0gNTtcclxuXHJcbmZ1bmN0aW9uIG5vT3AoKSB7fVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlKHtmZWF0dXJlLCBzdGF0ZX0pIHtcclxuICBjb25zdCBpc1Zpc2libGUgPSBnZXQoZmVhdHVyZSwgWydwcm9wZXJ0aWVzJywgJ2lzVmlzaWJsZSddLCB0cnVlKTtcclxuXHJcbiAgY29uc3Qgc3R5bGUgPSB7XHJcbiAgICBzdHJva2U6IFNUQVRFX1NUWUxFU19TVFJPS0Vbc3RhdGVdIHx8IERFRkFVTFRfU1RBVEVfU1RZTEVfU1RST0tFLFxyXG4gICAgc3Ryb2tlV2lkdGg6IGlzVmlzaWJsZSA/IFNUQVRFX1NUWUxFU19TVFJPS0VfV0lEVEggOiAwLFxyXG4gICAgZmlsbDogREVGQVVMVF9TVEFURV9TVFlMRV9GSUxMLFxyXG4gICAgZmlsbE9wYWNpdHk6IERFRkFVTFRfU1RBVEVfU1RZTEVfT1BBQ0lUWSxcclxuICAgIHI6IERFRkFVTFRfUkFESVVTXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgcmVuZGVyVHlwZSA9IGZlYXR1cmUucHJvcGVydGllcyA/IGZlYXR1cmUucHJvcGVydGllcy5yZW5kZXJUeXBlIDogZmVhdHVyZS5yZW5kZXJUeXBlO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4uc3R5bGUsXHJcbiAgICAuLi4oUkVOREVSX1RZUEVfU1RZTEVTW3JlbmRlclR5cGVdIHx8IG5vT3ApKHN0YXRlKVxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFZGl0SGFuZGxlU2hhcGUoKSB7XHJcbiAgcmV0dXJuIERFRkFVTFRfRURJVF9IQU5ETEVfU0hBUEU7XHJcbn1cclxuIl19