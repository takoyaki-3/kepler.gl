"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVertices = getVertices;
exports.getCentroid = getCentroid;
exports.idToPolygonGeo = idToPolygonGeo;
exports.getCenterHex = getCenterHex;
exports.getH3VerticeTransform = getH3VerticeTransform;
exports.distortCylinderPositions = distortCylinderPositions;
exports.getRadius = getRadius;
exports.getAngle = getAngle;
Object.defineProperty(exports, "h3GetResolution", {
  enumerable: true,
  get: function get() {
    return _h3Js.h3GetResolution;
  }
});
Object.defineProperty(exports, "h3IsValid", {
  enumerable: true,
  get: function get() {
    return _h3Js.h3IsValid;
  }
});

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _h3Js = require("h3-js");

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// get vertices should return [lon, lat]
function getVertices(_ref) {
  var id = _ref.id;
  // always reverse it
  return (0, _h3Js.h3ToGeoBoundary)(id, true);
} // get centroid should return [lon, lat]


function getCentroid(_ref2) {
  var id = _ref2.id;
  // always reverse it to [lng, lat]
  return (0, _h3Js.h3ToGeo)(id).reverse();
}

function idToPolygonGeo(_ref3, properties) {
  var object = _ref3.object;

  if (!object || !object.id) {
    return null;
  }

  var vertices = getVertices(object);
  return {
    geometry: {
      coordinates: vertices,
      type: 'LineString'
    },
    properties: properties
  };
}

function getCenterHex(_ref4, resolution) {
  var latitude = _ref4.latitude,
      longitude = _ref4.longitude;
  return (0, _h3Js.geoToH3)(latitude, longitude, resolution);
} // H3 hexagon are not perfect hexagon after projection, they are slightly distorted
// Here we calculate the distortion from perfect hexagon to h3 hexagon
// A mathematica proof can be found at
// https://beta.observablehq.com/@heshan0131/h3-hexagon-shape-normalize


function getH3VerticeTransform(rawVertices, centroid) {
  var vertices = revertVertices(rawVertices.map(function (vt) {
    return offset(vt, centroid);
  }));
  var radius = getRadius(vertices[0], vertices[3]);
  var angle = getAngle(vertices[0], vertices[3]); // rotate hexagon vertices, so that v0 - v3 axis parallel with xAxis
  //   2___1
  // 3 /   \ 0
  //   \___/
  //   4   5
  //

  var rotatedVertices = vertices.map(function (vt) {
    return rotate([0, 0], vt, angle);
  }); // vertices of a perfect hexagon

  var normalVertices = getHexagonVertices(radius); // calculate distortion

  return getDistortions(rotatedVertices, normalVertices);
} // Vertices index based on
// https://github.com/uber/luma.gl/blob/master/modules/core/src/geometry/truncated-cone-geometry.js


function distortCylinderPositions(positions, distortions) {
  var primitives = distortions.map(function (_ref5, i) {
    var dr = _ref5.dr,
        da = _ref5.da;
    return getPtOnCircle(dr, da + Math.PI * i / 3);
  }); // close it

  primitives.push(primitives[0]); // starting from the 8th vertice, repeat 4 times, only replace x(0), y(1)

  return positions.map(function (v, i) {
    if (i > 20 && i < 21 * 5 && i % 3 < 2) {
      var row = Math.floor(i / 3);
      var col = i % 3;
      return primitives[row % 7][col];
    }

    return v;
  });
}

function offset(_ref6, _ref7) {
  var _ref8 = (0, _slicedToArray2["default"])(_ref6, 2),
      px = _ref8[0],
      py = _ref8[1];

  var _ref9 = (0, _slicedToArray2["default"])(_ref7, 2),
      x0 = _ref9[0],
      y0 = _ref9[1];

  return [[px - x0], [py - y0]];
}

function rotate(_ref10, _ref11, radians) {
  var _ref12 = (0, _slicedToArray2["default"])(_ref10, 2),
      cx = _ref12[0],
      cy = _ref12[1];

  var _ref13 = (0, _slicedToArray2["default"])(_ref11, 2),
      x = _ref13[0],
      y = _ref13[1];

  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  var nx = cos * (x - cx) + sin * (y - cy) + cx;
  var ny = cos * (y - cy) - sin * (x - cx) + cy;
  return [nx, ny];
}

function getDistance(pt0, pt1) {
  var dx = pt0[0] - pt1[0];
  var dy = pt0[1] - pt1[1];
  var dxy = Math.sqrt(dx * dx + dy * dy);
  return dxy;
}

function getRadius(pt0, pt3) {
  var dxy = getDistance(pt0, pt3);
  return dxy / 2;
}

function getAngle(pt0, pt3) {
  var dx = pt0[0] - pt3[0];
  var dy = pt0[1] - pt3[1];
  var dxy = Math.sqrt(dx * dx + dy * dy); // Calculate angle that the perpendicular hexagon vertex axis is tilted

  var angle = Math.acos(dx / dxy) * Math.sign(dy);
  return angle;
}

function getPtOnCircle(radius, angle) {
  return [radius * Math.cos(angle), radius * Math.sin(angle)];
}

function getHexagonVertices(r) {
  var ang60 = Math.PI / 3;
  var pts = [];

  for (var i = 0; i < 6; i++) {
    pts.push(getPtOnCircle(r, ang60 * i));
  }

  return pts;
}

function revertVertices(verts) {
  // reverting verts from clock (h3) to counter clock wise (luma cylinder)
  var seq = [0, 5, 4, 3, 2, 1];
  return seq.map(function (s) {
    return verts[s];
  });
}

function getDistortions(vts, origs) {
  // 0 and 3 should be the guide
  var ct = [0, 0];
  var distortions = [];

  for (var i = 0; i < 6; i++) {
    var vt = vts[i];
    var org = origs[i];
    var r = getRadius(org, ct);
    var dr = getRadius(vt, ct) / r;
    var da = Math.atan2(vt[1], vt[0]) - Math.atan2(org[1], org[0]);
    distortions.push({
      dr: dr,
      da: da
    });
  }

  return distortions;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,