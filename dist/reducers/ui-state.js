"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.uiStateReducerFactory = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reduxActions = require("redux-actions");

var _actionTypes = _interopRequireDefault(require("../constants/action-types"));

var uiStateUpdaters = _interopRequireWildcard(require("./ui-state-updaters"));

var _actionHandler;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Important: Do not rename `actionHandler` or the assignment pattern of property value.
 * It is used to generate documentation
 */
var actionHandler = (_actionHandler = {}, (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].TOGGLE_SIDE_PANEL, uiStateUpdaters.toggleSidePanelUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].TOGGLE_MODAL, uiStateUpdaters.toggleModalUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].SHOW_EXPORT_DROPDOWN, uiStateUpdaters.showExportDropdownUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].HIDE_EXPORT_DROPDOWN, uiStateUpdaters.hideExportDropdownUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].OPEN_DELETE_MODAL, uiStateUpdaters.openDeleteModalUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].TOGGLE_MAP_CONTROL, uiStateUpdaters.toggleMapControlUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].ADD_NOTIFICATION, uiStateUpdaters.addNotificationUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].REMOVE_NOTIFICATION, uiStateUpdaters.removeNotificationUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].SET_EXPORT_IMAGE_SETTING, uiStateUpdaters.setExportImageSettingUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].START_EXPORTING_IMAGE, uiStateUpdaters.startExportingImageUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].SET_EXPORT_IMAGE_DATA_URI, uiStateUpdaters.setExportImageDataUriUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].SET_EXPORT_IMAGE_ERROR, uiStateUpdaters.setExportImageErrorUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].CLEANUP_EXPORT_IMAGE, uiStateUpdaters.cleanupExportImageUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].SET_EXPORT_SELECTED_DATASET, uiStateUpdaters.setExportSelectedDatasetUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].SET_EXPORT_DATA_TYPE, uiStateUpdaters.setExportDataTypeUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].SET_EXPORT_FILTERED, uiStateUpdaters.setExportFilteredUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].SET_EXPORT_DATA, uiStateUpdaters.setExportDataUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].SET_USER_MAPBOX_ACCESS_TOKEN, uiStateUpdaters.setUserMapboxAccessTokenUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].SET_EXPORT_MAP_FORMAT, uiStateUpdaters.setExportMapFormatUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].SET_EXPORT_MAP_HTML_MODE, uiStateUpdaters.setExportMapHTMLModeUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].LOAD_FILES, uiStateUpdaters.loadFilesUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].LOAD_FILES_ERR, uiStateUpdaters.loadFilesErrUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].TOGGLE_SPLIT_MAP, uiStateUpdaters.toggleSplitMapUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].SET_LOCALE, uiStateUpdaters.setLocaleUpdater), _actionHandler);
/* Reducer */

var uiStateReducerFactory = function uiStateReducerFactory() {
  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return (0, _reduxActions.handleActions)(actionHandler, _objectSpread(_objectSpread(_objectSpread({}, uiStateUpdaters.INITIAL_UI_STATE), initialState), {}, {
    initialState: initialState
  }));
};

exports.uiStateReducerFactory = uiStateReducerFactory;

var _default = uiStateReducerFactory();

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy91aS1zdGF0ZS5qcyJdLCJuYW1lcyI6WyJhY3Rpb25IYW5kbGVyIiwiQWN0aW9uVHlwZXMiLCJUT0dHTEVfU0lERV9QQU5FTCIsInVpU3RhdGVVcGRhdGVycyIsInRvZ2dsZVNpZGVQYW5lbFVwZGF0ZXIiLCJUT0dHTEVfTU9EQUwiLCJ0b2dnbGVNb2RhbFVwZGF0ZXIiLCJTSE9XX0VYUE9SVF9EUk9QRE9XTiIsInNob3dFeHBvcnREcm9wZG93blVwZGF0ZXIiLCJISURFX0VYUE9SVF9EUk9QRE9XTiIsImhpZGVFeHBvcnREcm9wZG93blVwZGF0ZXIiLCJPUEVOX0RFTEVURV9NT0RBTCIsIm9wZW5EZWxldGVNb2RhbFVwZGF0ZXIiLCJUT0dHTEVfTUFQX0NPTlRST0wiLCJ0b2dnbGVNYXBDb250cm9sVXBkYXRlciIsIkFERF9OT1RJRklDQVRJT04iLCJhZGROb3RpZmljYXRpb25VcGRhdGVyIiwiUkVNT1ZFX05PVElGSUNBVElPTiIsInJlbW92ZU5vdGlmaWNhdGlvblVwZGF0ZXIiLCJTRVRfRVhQT1JUX0lNQUdFX1NFVFRJTkciLCJzZXRFeHBvcnRJbWFnZVNldHRpbmdVcGRhdGVyIiwiU1RBUlRfRVhQT1JUSU5HX0lNQUdFIiwic3RhcnRFeHBvcnRpbmdJbWFnZVVwZGF0ZXIiLCJTRVRfRVhQT1JUX0lNQUdFX0RBVEFfVVJJIiwic2V0RXhwb3J0SW1hZ2VEYXRhVXJpVXBkYXRlciIsIlNFVF9FWFBPUlRfSU1BR0VfRVJST1IiLCJzZXRFeHBvcnRJbWFnZUVycm9yVXBkYXRlciIsIkNMRUFOVVBfRVhQT1JUX0lNQUdFIiwiY2xlYW51cEV4cG9ydEltYWdlVXBkYXRlciIsIlNFVF9FWFBPUlRfU0VMRUNURURfREFUQVNFVCIsInNldEV4cG9ydFNlbGVjdGVkRGF0YXNldFVwZGF0ZXIiLCJTRVRfRVhQT1JUX0RBVEFfVFlQRSIsInNldEV4cG9ydERhdGFUeXBlVXBkYXRlciIsIlNFVF9FWFBPUlRfRklMVEVSRUQiLCJzZXRFeHBvcnRGaWx0ZXJlZFVwZGF0ZXIiLCJTRVRfRVhQT1JUX0RBVEEiLCJzZXRFeHBvcnREYXRhVXBkYXRlciIsIlNFVF9VU0VSX01BUEJPWF9BQ0NFU1NfVE9LRU4iLCJzZXRVc2VyTWFwYm94QWNjZXNzVG9rZW5VcGRhdGVyIiwiU0VUX0VYUE9SVF9NQVBfRk9STUFUIiwic2V0RXhwb3J0TWFwRm9ybWF0VXBkYXRlciIsIlNFVF9FWFBPUlRfTUFQX0hUTUxfTU9ERSIsInNldEV4cG9ydE1hcEhUTUxNb2RlVXBkYXRlciIsIkxPQURfRklMRVMiLCJsb2FkRmlsZXNVcGRhdGVyIiwiTE9BRF9GSUxFU19FUlIiLCJsb2FkRmlsZXNFcnJVcGRhdGVyIiwiVE9HR0xFX1NQTElUX01BUCIsInRvZ2dsZVNwbGl0TWFwVXBkYXRlciIsIlNFVF9MT0NBTEUiLCJzZXRMb2NhbGVVcGRhdGVyIiwidWlTdGF0ZVJlZHVjZXJGYWN0b3J5IiwiaW5pdGlhbFN0YXRlIiwiSU5JVElBTF9VSV9TVEFURSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQW9CQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7QUFFQTs7OztBQUlBLElBQU1BLGFBQWEsMEVBQ2hCQyx3QkFBWUMsaUJBREksRUFDZ0JDLGVBQWUsQ0FBQ0Msc0JBRGhDLG9EQUVoQkgsd0JBQVlJLFlBRkksRUFFV0YsZUFBZSxDQUFDRyxrQkFGM0Isb0RBR2hCTCx3QkFBWU0sb0JBSEksRUFHbUJKLGVBQWUsQ0FBQ0sseUJBSG5DLG9EQUloQlAsd0JBQVlRLG9CQUpJLEVBSW1CTixlQUFlLENBQUNPLHlCQUpuQyxvREFLaEJULHdCQUFZVSxpQkFMSSxFQUtnQlIsZUFBZSxDQUFDUyxzQkFMaEMsb0RBTWhCWCx3QkFBWVksa0JBTkksRUFNaUJWLGVBQWUsQ0FBQ1csdUJBTmpDLG9EQU9oQmIsd0JBQVljLGdCQVBJLEVBT2VaLGVBQWUsQ0FBQ2Esc0JBUC9CLG9EQVFoQmYsd0JBQVlnQixtQkFSSSxFQVFrQmQsZUFBZSxDQUFDZSx5QkFSbEMsb0RBVWhCakIsd0JBQVlrQix3QkFWSSxFQVV1QmhCLGVBQWUsQ0FBQ2lCLDRCQVZ2QyxvREFXaEJuQix3QkFBWW9CLHFCQVhJLEVBV29CbEIsZUFBZSxDQUFDbUIsMEJBWHBDLG9EQVloQnJCLHdCQUFZc0IseUJBWkksRUFZd0JwQixlQUFlLENBQUNxQiw0QkFaeEMsb0RBYWhCdkIsd0JBQVl3QixzQkFiSSxFQWFxQnRCLGVBQWUsQ0FBQ3VCLDBCQWJyQyxvREFjaEJ6Qix3QkFBWTBCLG9CQWRJLEVBY21CeEIsZUFBZSxDQUFDeUIseUJBZG5DLG9EQWdCaEIzQix3QkFBWTRCLDJCQWhCSSxFQWdCMEIxQixlQUFlLENBQUMyQiwrQkFoQjFDLG9EQWlCaEI3Qix3QkFBWThCLG9CQWpCSSxFQWlCbUI1QixlQUFlLENBQUM2Qix3QkFqQm5DLG9EQWtCaEIvQix3QkFBWWdDLG1CQWxCSSxFQWtCa0I5QixlQUFlLENBQUMrQix3QkFsQmxDLG9EQW1CaEJqQyx3QkFBWWtDLGVBbkJJLEVBbUJjaEMsZUFBZSxDQUFDaUMsb0JBbkI5QixvREFvQmhCbkMsd0JBQVlvQyw0QkFwQkksRUFvQjJCbEMsZUFBZSxDQUFDbUMsK0JBcEIzQyxvREFzQmhCckMsd0JBQVlzQyxxQkF0QkksRUFzQm9CcEMsZUFBZSxDQUFDcUMseUJBdEJwQyxvREF3QmhCdkMsd0JBQVl3Qyx3QkF4QkksRUF3QnVCdEMsZUFBZSxDQUFDdUMsMkJBeEJ2QyxvREF5QmhCekMsd0JBQVkwQyxVQXpCSSxFQXlCU3hDLGVBQWUsQ0FBQ3lDLGdCQXpCekIsb0RBMEJoQjNDLHdCQUFZNEMsY0ExQkksRUEwQmExQyxlQUFlLENBQUMyQyxtQkExQjdCLG9EQTRCaEI3Qyx3QkFBWThDLGdCQTVCSSxFQTRCZTVDLGVBQWUsQ0FBQzZDLHFCQTVCL0Isb0RBNkJoQi9DLHdCQUFZZ0QsVUE3QkksRUE2QlM5QyxlQUFlLENBQUMrQyxnQkE3QnpCLGtCQUFuQjtBQWdDQTs7QUFDTyxJQUFNQyxxQkFBcUIsR0FBRyxTQUF4QkEscUJBQXdCO0FBQUEsTUFBQ0MsWUFBRCx1RUFBZ0IsRUFBaEI7QUFBQSxTQUNuQyxpQ0FBY3BELGFBQWQsZ0RBQ0tHLGVBQWUsQ0FBQ2tELGdCQURyQixHQUVLRCxZQUZMO0FBR0VBLElBQUFBLFlBQVksRUFBWkE7QUFIRixLQURtQztBQUFBLENBQTlCOzs7O2VBT1FELHFCQUFxQixFIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIwIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtoYW5kbGVBY3Rpb25zfSBmcm9tICdyZWR1eC1hY3Rpb25zJztcclxuaW1wb3J0IEFjdGlvblR5cGVzIGZyb20gJ2NvbnN0YW50cy9hY3Rpb24tdHlwZXMnO1xyXG5pbXBvcnQgKiBhcyB1aVN0YXRlVXBkYXRlcnMgZnJvbSAnLi91aS1zdGF0ZS11cGRhdGVycyc7XHJcblxyXG4vKipcclxuICogSW1wb3J0YW50OiBEbyBub3QgcmVuYW1lIGBhY3Rpb25IYW5kbGVyYCBvciB0aGUgYXNzaWdubWVudCBwYXR0ZXJuIG9mIHByb3BlcnR5IHZhbHVlLlxyXG4gKiBJdCBpcyB1c2VkIHRvIGdlbmVyYXRlIGRvY3VtZW50YXRpb25cclxuICovXHJcbmNvbnN0IGFjdGlvbkhhbmRsZXIgPSB7XHJcbiAgW0FjdGlvblR5cGVzLlRPR0dMRV9TSURFX1BBTkVMXTogdWlTdGF0ZVVwZGF0ZXJzLnRvZ2dsZVNpZGVQYW5lbFVwZGF0ZXIsXHJcbiAgW0FjdGlvblR5cGVzLlRPR0dMRV9NT0RBTF06IHVpU3RhdGVVcGRhdGVycy50b2dnbGVNb2RhbFVwZGF0ZXIsXHJcbiAgW0FjdGlvblR5cGVzLlNIT1dfRVhQT1JUX0RST1BET1dOXTogdWlTdGF0ZVVwZGF0ZXJzLnNob3dFeHBvcnREcm9wZG93blVwZGF0ZXIsXHJcbiAgW0FjdGlvblR5cGVzLkhJREVfRVhQT1JUX0RST1BET1dOXTogdWlTdGF0ZVVwZGF0ZXJzLmhpZGVFeHBvcnREcm9wZG93blVwZGF0ZXIsXHJcbiAgW0FjdGlvblR5cGVzLk9QRU5fREVMRVRFX01PREFMXTogdWlTdGF0ZVVwZGF0ZXJzLm9wZW5EZWxldGVNb2RhbFVwZGF0ZXIsXHJcbiAgW0FjdGlvblR5cGVzLlRPR0dMRV9NQVBfQ09OVFJPTF06IHVpU3RhdGVVcGRhdGVycy50b2dnbGVNYXBDb250cm9sVXBkYXRlcixcclxuICBbQWN0aW9uVHlwZXMuQUREX05PVElGSUNBVElPTl06IHVpU3RhdGVVcGRhdGVycy5hZGROb3RpZmljYXRpb25VcGRhdGVyLFxyXG4gIFtBY3Rpb25UeXBlcy5SRU1PVkVfTk9USUZJQ0FUSU9OXTogdWlTdGF0ZVVwZGF0ZXJzLnJlbW92ZU5vdGlmaWNhdGlvblVwZGF0ZXIsXHJcblxyXG4gIFtBY3Rpb25UeXBlcy5TRVRfRVhQT1JUX0lNQUdFX1NFVFRJTkddOiB1aVN0YXRlVXBkYXRlcnMuc2V0RXhwb3J0SW1hZ2VTZXR0aW5nVXBkYXRlcixcclxuICBbQWN0aW9uVHlwZXMuU1RBUlRfRVhQT1JUSU5HX0lNQUdFXTogdWlTdGF0ZVVwZGF0ZXJzLnN0YXJ0RXhwb3J0aW5nSW1hZ2VVcGRhdGVyLFxyXG4gIFtBY3Rpb25UeXBlcy5TRVRfRVhQT1JUX0lNQUdFX0RBVEFfVVJJXTogdWlTdGF0ZVVwZGF0ZXJzLnNldEV4cG9ydEltYWdlRGF0YVVyaVVwZGF0ZXIsXHJcbiAgW0FjdGlvblR5cGVzLlNFVF9FWFBPUlRfSU1BR0VfRVJST1JdOiB1aVN0YXRlVXBkYXRlcnMuc2V0RXhwb3J0SW1hZ2VFcnJvclVwZGF0ZXIsXHJcbiAgW0FjdGlvblR5cGVzLkNMRUFOVVBfRVhQT1JUX0lNQUdFXTogdWlTdGF0ZVVwZGF0ZXJzLmNsZWFudXBFeHBvcnRJbWFnZVVwZGF0ZXIsXHJcblxyXG4gIFtBY3Rpb25UeXBlcy5TRVRfRVhQT1JUX1NFTEVDVEVEX0RBVEFTRVRdOiB1aVN0YXRlVXBkYXRlcnMuc2V0RXhwb3J0U2VsZWN0ZWREYXRhc2V0VXBkYXRlcixcclxuICBbQWN0aW9uVHlwZXMuU0VUX0VYUE9SVF9EQVRBX1RZUEVdOiB1aVN0YXRlVXBkYXRlcnMuc2V0RXhwb3J0RGF0YVR5cGVVcGRhdGVyLFxyXG4gIFtBY3Rpb25UeXBlcy5TRVRfRVhQT1JUX0ZJTFRFUkVEXTogdWlTdGF0ZVVwZGF0ZXJzLnNldEV4cG9ydEZpbHRlcmVkVXBkYXRlcixcclxuICBbQWN0aW9uVHlwZXMuU0VUX0VYUE9SVF9EQVRBXTogdWlTdGF0ZVVwZGF0ZXJzLnNldEV4cG9ydERhdGFVcGRhdGVyLFxyXG4gIFtBY3Rpb25UeXBlcy5TRVRfVVNFUl9NQVBCT1hfQUNDRVNTX1RPS0VOXTogdWlTdGF0ZVVwZGF0ZXJzLnNldFVzZXJNYXBib3hBY2Nlc3NUb2tlblVwZGF0ZXIsXHJcblxyXG4gIFtBY3Rpb25UeXBlcy5TRVRfRVhQT1JUX01BUF9GT1JNQVRdOiB1aVN0YXRlVXBkYXRlcnMuc2V0RXhwb3J0TWFwRm9ybWF0VXBkYXRlcixcclxuXHJcbiAgW0FjdGlvblR5cGVzLlNFVF9FWFBPUlRfTUFQX0hUTUxfTU9ERV06IHVpU3RhdGVVcGRhdGVycy5zZXRFeHBvcnRNYXBIVE1MTW9kZVVwZGF0ZXIsXHJcbiAgW0FjdGlvblR5cGVzLkxPQURfRklMRVNdOiB1aVN0YXRlVXBkYXRlcnMubG9hZEZpbGVzVXBkYXRlcixcclxuICBbQWN0aW9uVHlwZXMuTE9BRF9GSUxFU19FUlJdOiB1aVN0YXRlVXBkYXRlcnMubG9hZEZpbGVzRXJyVXBkYXRlcixcclxuXHJcbiAgW0FjdGlvblR5cGVzLlRPR0dMRV9TUExJVF9NQVBdOiB1aVN0YXRlVXBkYXRlcnMudG9nZ2xlU3BsaXRNYXBVcGRhdGVyLFxyXG4gIFtBY3Rpb25UeXBlcy5TRVRfTE9DQUxFXTogdWlTdGF0ZVVwZGF0ZXJzLnNldExvY2FsZVVwZGF0ZXJcclxufTtcclxuXHJcbi8qIFJlZHVjZXIgKi9cclxuZXhwb3J0IGNvbnN0IHVpU3RhdGVSZWR1Y2VyRmFjdG9yeSA9IChpbml0aWFsU3RhdGUgPSB7fSkgPT5cclxuICBoYW5kbGVBY3Rpb25zKGFjdGlvbkhhbmRsZXIsIHtcclxuICAgIC4uLnVpU3RhdGVVcGRhdGVycy5JTklUSUFMX1VJX1NUQVRFLFxyXG4gICAgLi4uaW5pdGlhbFN0YXRlLFxyXG4gICAgaW5pdGlhbFN0YXRlXHJcbiAgfSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB1aVN0YXRlUmVkdWNlckZhY3RvcnkoKTtcclxuIl19